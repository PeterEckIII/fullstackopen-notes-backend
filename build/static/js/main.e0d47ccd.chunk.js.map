{"version":3,"sources":["components/Note.js","components/NoteList.js","components/AddNote.js","components/FilterButton.js","components/Footer.js","services/notes.js","App.js","serviceWorker.js","index.js"],"names":["Note","note","toggleImportance","label","important","key","id","content","onClick","NoteList","notesToShow","map","AddNote","addNote","newNote","handleNoteChange","onSubmit","type","value","onChange","FilterButton","showAll","setShowAll","FootContainer","styled","div","Footer","axios","get","then","res","data","newObject","post","put","App","useState","notes","setNotes","setNewNote","setErrorMessage","useEffect","noteService","initialNotes","filter","find","changedNote","returnedNote","catch","e","setTimeout","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","console","log","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0d47ccd.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'Mark not important' : 'Mark important'\n\n    return (\n        <div key={note.id}>\n            { note.content }\n            <button onClick={() => toggleImportance(note.id)}>{ label }</button>\n        </div>\n    )\n};\n\nexport default Note;\n","import React from 'react';\nimport Note from './Note';\n\nconst NoteList = ({ notesToShow, toggleImportance }) => (\n    <ul>\n        {notesToShow.map(note => {\n            return (\n                <Note\n                    key={note.id}\n                    note={note}\n                    toggleImportance={toggleImportance}\n                />\n            )\n        })}\n    </ul>\n);\n\nexport default NoteList;\n","import React from 'react'\n\nconst AddNote = ({ addNote, newNote, handleNoteChange }) =>(\n    <form onSubmit={addNote}>\n        <input\n            type=\"text\"\n            value={newNote}\n            onChange={handleNoteChange}\n        />\n        <button type=\"submit\">Save</button>\n    </form>\n);\n\nexport default AddNote;","import React from 'react'\n\nconst FilterButton = ({ showAll, setShowAll }) => (\n    <div>\n        <button onClick={() => setShowAll(!showAll)}>\n            Show {showAll ? 'important' : 'all'}\n        </button>\n    </div>\n);\n\nexport default FilterButton;","import React from 'react'\nimport styled from 'styled-components';\n\nconst FootContainer = styled.div`\n    color: green;\n    font-style: italic;\n    font-size: 16px;\n`;\n\nconst Footer = () => (\n    <FootContainer>\n        <br/>\n        <em>Note app, Published by Peter Eck</em>\n    </FootContainer>\n)\n\nexport default Footer;\n","import axios from 'axios';\n\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then(res => res.data);\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(res => res.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${ baseUrl }/${ id }`, newObject)\n    return request.then(res => res.data);\n}\n\nexport default {\n    getAll,\n    create,\n    update\n};\n","import React, { useState, useEffect } from 'react';\nimport NoteList from './components/NoteList';\nimport AddNote from './components/AddNote';\nimport FilterButton from './components/FilterButton';\nimport Footer from './components/Footer';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [ notes, setNotes ] = useState([]);\n  const [ newNote, setNewNote ] = useState('');\n  const [ showAll, setShowAll ] = useState(true);\n  const [ errorMessage, setErrorMessage ] = useState('error!');\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => setNotes(initialNotes))\n  }, [])\n\n  const handleNoteChange = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  }\n\n  const toggleImportance = id => {\n    const note = notes.find(note => note.id === id);\n    const changedNote = { ...note, important: !note.important }\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id ? note : returnedNote))\n      })\n      .catch(e => {\n        setErrorMessage(\n          `Note ${ note.content } was already removed from the server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(note => note.id !== id))\n      })\n  }\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes([ ...notes, returnedNote ]);\n        setNewNote('');\n      });\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  return (\n    <div>\n      <h2>Notebook</h2>\n      <h6>Filter Notes</h6>\n      <FilterButton\n        showAll={ showAll }\n        setShowAll={ setShowAll }\n      />\n      <h5>Notes: </h5>\n      <NoteList\n        notesToShow={ notesToShow }\n        toggleImportance={ toggleImportance }\n      />\n\n      <h5>Add New Note</h5>\n      <AddNote\n        addNote={ addNote }\n        newNote={ newNote }\n        handleNoteChange={ handleNoteChange }\n      />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}